// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Utils = require("./Utils.bs.js");
var Blockstack = require("./ffi/Blockstack.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var BitcoinjsLib = require("bitcoinjs-lib");
var Encryption = require("blockstack/lib/encryption");

function generateKeyPair(param) {
  return BitcoinjsLib.ECPair.makeRandom().toWIF();
}

function encodeSharedData(data) {
  return Json_encode.object_({
              hd: [
                "addresses",
                Json_encode.array((function (prim) {
                        return prim;
                      }), data.addresses)
              ],
              tl: /* [] */0
            });
}

function decodeSharedData(raw) {
  return {
          addresses: Json_decode.field("addresses", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), raw)
        };
}

function readSharedData(param, keyPair) {
  return Blockstack.getFileFromUser(param.ventureId + ("/" + (Utils.storagePrefix(Utils.publicKeyFromKeyPair(keyPair)) + "/sharedData.json")), param.username, param.app).then(function (nullFile) {
              if (nullFile == null) {
                return Promise.resolve(undefined);
              } else {
                return Promise.resolve(decodeSharedData(Json.parseOrRaise(Encryption.decryptECIES(Utils.privateKeyFromKeyPair(keyPair), Json.parseOrRaise(nullFile)))));
              }
            });
}

exports.generateKeyPair = generateKeyPair;
exports.encodeSharedData = encodeSharedData;
exports.decodeSharedData = decodeSharedData;
exports.readSharedData = readSharedData;
/* Utils Not a pure module */
